<?php

namespace App\Admin\Controllers;

use App\Models\Room;
use App\Models\RoomRole;
use App\Models\User;
use Encore\Admin\Controllers\AdminController;
use Encore\Admin\Facades\Admin;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Layout\Content;
use Encore\Admin\Show;
use Illuminate\Support\Str;

class SupervisorsRoomController extends AdminController
{
    /**
     * Title for current resource.
     *
     * @var string
     */
    protected $title = 'App\Models\User';

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {
        $userId = Admin::user()->id;
        $adminLevel = User::getUserLevel($userId);
        $grid = new Grid(new Room());
        //$grid->model()->where('user_level', '>', config('admin.admin_level.supervisor'));
        //var_dump(User::getSupervisorIdsByCreator($userId));
        $grid->disableCreateButton();
        if ($adminLevel == config('admin.admin_level.admin')) {
            $grid->model()->whereIn('user_id', User::getSupervisorIdsByCreator($userId));

        } elseif ($adminLevel == config('admin.admin_level.supervisor')) {
            $grid->disableCreateButton(false);
            $grid->model()->where('user_id', '=', $userId);
        }
        $grid->column('id', __('Id'));
        $grid->column('name', __('Name'));
        $grid->column('description', __('Description'));
        if ($adminLevel != config('admin.admin_level.supervisor')) {
            $grid->column('user_id', __('Created By'))
                ->display(function ($userId) {
                    return User::find($userId)->name;
                });
        }

        /*$grid->director()->display(function($userId) {
            return User::find($userId)->name;
        });*/

        $grid->column('created_at', __('Created at'))->hide();
        $grid->column('updated_at', __('Updated at'))->hide();

        return $grid;
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        $userId = Admin::user()->id;
        $show = new Show(Room::showRoom($id, $userId));

        $show->field('id', __('Id'));
        $show->field('name', __('Name'));
        $show->field('description', __('Description'));
        $show->field('created_at', __('Created at'));
        $show->field('updated_at', __('Updated at'));

        return $show;
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form()
    {
        $form = new Form(new Room());


        $form->display('id', 'ID');
        $form->text('name', trans('admin.name'))->rules('required');
        $form->text('description', trans('admin.description'))->rules('required');
        $form->number('max_users', 'Max Users')->rules('required')->default(200);
        $form->multipleSelect('room_roles', 'Rolls')->options(RoomRole::all()->pluck('name', 'id'));
        //$form->image('avatar', trans('admin.avatar'));


        if ($form->isCreating()) {
            $form->hidden('user_id');
            $form->hidden('url');
        }
        $form->saving(function (Form $form) {

            if ($form->isCreating()) {
                $form->user_id = Admin::user()->id;
                $form->url = Str::random(30);
            };
        });

        return $form;
    }

    public function edit($id, Content $content)
    {
        $userId = Admin::user()->id;
        if (!Room::canEditRoom($id, $userId)) {
            return redirect(config('admin.route.prefix') . "/rooms");
        }
        return parent::edit($id, $content); // TODO: Change the autogenerated stub
    }
    public function save(array $options = array())
    {
        if(empty($this->id)) {
            $this->url = rand();
        }
        return parent::save($options);
    }
}
