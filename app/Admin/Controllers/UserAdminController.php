<?php

namespace App\Admin\Controllers;
use App\Admin\Models\UserAdmin;
use App\Models\AdminUri;
use Encore\Admin\Controllers\UserController as AdminUser;
use Encore\Admin\Facades\Admin;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Layout\Content;
use Encore\Admin\Show;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class UserAdminController extends AdminUser
{
    /**
     * Title for current resource.
     *
     * @var string
     */
    protected $title = 'Encore\Admin\Auth\Database\Administrator';

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {

        $grid = parent::grid();
        $grid->column('created_at')->hide();
        //$grid->model()->where('created_by', '=', Admin::user()->id);
        return $grid; // TODO: Change the autogenerated stub
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        return parent::detail($id); // TODO: Change the autogenerated stub
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
    public function form()
    {
        $userModel = config('admin.database.users_model');
        $permissionModel = config('admin.database.permissions_model');
        $roleModel = config('admin.database.roles_model');

        $form = new Form(new $userModel());

        $userTable = config('admin.database.users_table');
        $connection = config('admin.database.connection');

        $form->display('id', 'ID');
        $form->text('username', trans('admin.username'))
            ->creationRules(['required', "unique:{$connection}.{$userTable}"])
            ->updateRules(['required', "unique:{$connection}.{$userTable},username,{{id}}"]);

        $form->text('name', trans('admin.name'))->rules('required');
        $form->image('avatar', trans('admin.avatar'));
        $form->password('password', trans('admin.password'))->rules('required|confirmed');
        $form->password('password_confirmation', trans('admin.password_confirmation'))->rules('required')
            ->default(function ($form) {
                return $form->model()->password;
            });

        $form->ignore(['password_confirmation']);

        //print_r(AdminUri::all()->find(Admin::user()->id));
        $userPermissions = Admin::user()->permissions;
        $permissionArr = null;
        foreach ($userPermissions as $permission)
        {
            $permissionArr[] = $permission->id;
            //array_push($permissionArr, $permission->id);
        }
        print_r($permissionArr);
        $form->multipleSelect('roles', trans('admin.roles'))->setDisplay(false);
        $form->multipleSelect('permissions', trans('admin.permissions'))->setDisplay(false);

        $form->display('created_at', trans('admin.created_at'));
        $form->display('updated_at', trans('admin.updated_at'));


        $form->saving(function (Form $form) {
            if ($form->password && $form->model()->password != $form->password) {
                $form->password = bcrypt($form->password);
            }
            //var_dump($form->roles);
            //return response($form->permissions , 200);
            $form->roles = ["2",null];
            if ($form->isCreating())
            {
                $form->created_by = Admin::user()->id;

                if (DB::table('admin_uris')->where('uri', $form->username)->count() <= 0)
                {
                    $form->uri = $form->username;
                }else
                {
                    $random = Str::random(10);
                    $form->uri = $form->username."_".$random;
                }

            }/**/
        });
        if ($form->isEditing()) {
            $form->text('adminUri.uri', __('Uri'))
                ->creationRules(['required', "unique:{$connection}.{$userTable}"])
                ->updateRules(['required', "unique:{$connection}.{$userTable},adminUri.uri,{{id}}"]);
        } else {
            $form->hidden('adminUri.uri', __('Uri'));
            $form->hidden('created_by');
        }
        return $form;

    }

    public function edit($id, Content $content)
    {
        $created_by = DB::table(config('admin.database.users_table'))->where('id', '=', $id)->select('created_by')->get()->first()->{'created_by'};
        $admin_id = Admin::user()->id;
       if ($created_by != $id && $admin_id != 1)
       {
           //return "....";
       }

        return parent::edit($id, $content); // TODO: Change the autogenerated stub
    }
}
